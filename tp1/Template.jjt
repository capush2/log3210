options {
	JAVA_UNICODE_ESCAPE=true;
	STATIC=false;					// 1 seul parseur actif a la fois (+ rapide)
	MULTI=true;						// type noeud = f(nom noeud)
	VISITOR=true;					// Cree une methode accept(visiteur)
}

//
// PARSER DEFINITION
//

PARSER_BEGIN(Parser)

package analyzer.ast;

public class Parser
{
	public static ASTProgram ParseTree(java.io.InputStream input) throws ParseException
	{
		Parser c = new Parser(input);
		return c.Program();
	}
}

PARSER_END(Parser)

//
// LEXICAL ANALYSIS
//

// White space

SKIP :
{
	< ( " " | "\t" | "\n" | "\r" )+	>
}

// Comments

MORE :
{
  "//" : IN_SINGLE_LINE_COMMENT
|
  <"/**" ~["/"]> { input_stream.backup(1); } : IN_FORMAL_COMMENT
|
  "/*" : IN_MULTI_LINE_COMMENT
}

<IN_SINGLE_LINE_COMMENT>
SPECIAL_TOKEN :
{
  <SINGLE_LINE_COMMENT: "\n" | "\r" | "\r\n" > : DEFAULT
}

<IN_FORMAL_COMMENT>
SPECIAL_TOKEN :
{
  <FORMAL_COMMENT: "*/" > : DEFAULT
}

<IN_MULTI_LINE_COMMENT>
SPECIAL_TOKEN :
{
  <MULTI_LINE_COMMENT: "*/" > : DEFAULT
}

<IN_SINGLE_LINE_COMMENT,IN_FORMAL_COMMENT,IN_MULTI_LINE_COMMENT>
MORE :
{
  < ~[] >
}




// Keywords
TOKEN :
{
	< PRINT: "print" > |
	< INPUT: "input" > |
	< RETURN: "return"> |
    < WHILE: "while" > |
    < DO: "do" > |
    < FOR: "for" > |
    < IF: "if" > |
    < ELSE: "else" > |
    < ELIF: <ELSE> <IF>>|
    < TYPE: <FLOAT> | <INT> | <BOOL>> |
    < #FLOAT: "float"> |
    < #INT: "int"> |
    < #BOOL: "bool">
}

// Operators
TOKEN :
{
	< ASSIGN: < EQUAL >  > |
	< COMPARE: < LESS > | < LESSEQUAL > | < GREAT > | <GREATEQUAL > | < DIFF > | < EQUALEQUAL > > |
    < LOGIC: < AND > | < OR > > |
	< #LESS: "<" > |
	< #LESSEQUAL: "<=" > |
	< #GREAT: ">" > |
	< #GREATEQUAL: ">=" > |
	< #DIFF: "!=" > |
	< #EQUALEQUAL: "==" > |

	< PLUS: "+" > |
	< MINUS: "-" > |
	< FOIS: "*" > |
	< DIV: "/" > |
    < NOT: "!" > |

	< #EQUAL: "=" > |
	< LPAREN: "(" > |
	< RPAREN: ")" > |
	< LACC: "{" > |
	< RACC: "}" > |
	< COLON: ":" > |
	< SEMICOLON: ";" > |
	< COMMA: "," > |
	< #AND: "&&" > |
	< #OR: "||" > |
	< ARROW: "->" >
}


// Identifiers and numbers
TOKEN :
{
    < BOOLEAN: <TRUE> | <FALSE> > |
	< IDENTIFIER: <LETTER> ( <LETTER> | <DIGIT> )* > |
	< #LETTER: ["a"-"z","A"-"Z","_"] > |
	< #DIGIT: ["0"-"9"] > |
	< INTEGER: ["1"-"9"] (["0"-"9"])* | "0" > |
	< REAL: (<INTEGER>)? "." (["0"-"9"])* (<EXPONENT>)? |
    			  (<INTEGER>)? <EXPONENT> > |
    < #EXPONENT: ["e","E"] (["+","-"])? (["0"-"9"])+ > |
    < #TRUE: "true"> |
    < #FALSE: "false">
}



//
// SYNTAX ANALYSIS
//





void Stmt() #void : { }
{
	(AssignStmt() <SEMICOLON>) |
	LoopStmt() |
	CondStmt()
}

void LoopStmt() #void : { }
{
    WhileStmt() |
    (DoWhileStmt() <SEMICOLON>) |
    ForStmt()
}

void CondStmt() #void : { }
{
    IfStmt()
}

ASTProgram Program() : { }
{
	Block() <EOF> { return jjtThis;  }
}

void Block() : { }
{
	 (Stmt())+
}

// Ã  finir -- commencez ici!
void WhileStmt() : { }
{
    <WHILE> ParenExpr() (AccBlock() | Stmt())
}

void DoWhileStmt() : { }
{
    <DO> AccBlock() <WHILE> ParenExpr()
}

void IfStmt() : { }
{
    <IF> ParenExpr() (
        (Stmt() | AccBlock())
        (LOOKAHEAD(2)<ELIF> ParenExpr() (Stmt() | AccBlock()))*
        (LOOKAHEAD(2)<ELSE> (Stmt() | AccBlock()))?
    )
}

void ForStmt() : { }
{
    <FOR> <LPAREN> ((AssignStmt())?)#ForInit <SEMICOLON> ((Expr())?)#ForCond <SEMICOLON> ((AssignStmt())?)#ForStep <RPAREN> (AccBlock() | Stmt())
}

void LambdaStmt() : { }
{
    <LPAREN> (Parameter() (<COMMA> Parameter())*)? <RPAREN> <ARROW>
    ((<LACC> (Block())? (<RETURN> Expr() <SEMICOLON>)? <RACC>) |
        Stmt() |
        <RETURN> Expr() <SEMICOLON>)
}

void ParenExpr() : { }
{
    <LPAREN> Expr() <RPAREN>
}

void AccBlock() #void : { }
{
    <LACC> Block() <RACC>
}

void AssignStmt() : { }
{
    Identifier() <ASSIGN> (LOOKAHEAD(2)  Expr() | LambdaStmt())
}

void Expr() #void : {}
{
    LogicExpr()
}

void LogicExpr() #void : { }
{
    (CompExpr() (<LOGIC> CompExpr())*)#LogicExpr(>1)
}

void CompExpr() #void : { }
{
    (AddExpr() (<COMPARE> AddExpr())*)#CompareExpr(>1)
}

void AddExpr() #void : { }
{
    (MultExpr() ((<PLUS>|<MINUS>) MultExpr())*)#AddExpr(>1)
}

void MultExpr() #void : { }
{
    (NegExpr() ((<FOIS>|<DIV>) NegExpr())*)#MultExpr(>1)
}

void NegExpr() #void: { }
{
    ((Minus())* NotExpr())
}

void NotExpr() #void: { }
{
    ((Not())* (ParenExpr() | BasicExpr()))
}

void BasicExpr() #void: { }
{
    Identifier() | IntValue() | RealValue() | BoolValue()
}

void Identifier() : { }
{
	<IDENTIFIER>
}

void IntValue() : { }
{
	<INTEGER>
}

void RealValue() : { }
{
	<REAL>
}

void BoolValue() : { }
{
	<BOOLEAN>
}

void Parameter() : { }
{
    <TYPE><IDENTIFIER>
}

void Minus() : {}
{
    <MINUS>
}

void Not() : {}
{
    <NOT>
}
